name: Build and Test IP

# This workflow is disabled by default and requires manual triggering
# It provides a generic build and test pipeline for Vyges IP projects

on:
  push:
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      - '**.md'
      - '.github/ISSUE_TEMPLATE/**'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      - '**.md'
      - '.github/ISSUE_TEMPLATE/**'
  workflow_dispatch:
    inputs:
      # Allow users to specify which components to test
      test_simulation:
        description: 'Run simulation tests'
        required: false
        default: true
        type: boolean
      test_synthesis:
        description: 'Run synthesis tests'
        required: false
        default: true
        type: boolean
      test_linting:
        description: 'Run linting checks'
        required: false
        default: true
        type: boolean
      test_validation:
        description: 'Run validation checks'
        required: false
        default: true
        type: boolean
      target_platform:
        description: 'Target platform (asic, fpga, or both)'
        required: false
        default: 'both'
        type: choice
        options:
          - asic
          - fpga
          - both
      simulator:
        description: 'Simulator to use'
        required: false
        default: 'both'
        type: choice
        options:
          - verilator
          - icarus
          - both

# Disable automatic runs - this workflow only runs on manual trigger
# and when explicitly enabled by repository maintainers

jobs:
  # Main build and test job - everything runs sequentially on one runner
  build-and-test:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            cmake \
            git \
            wget \
            curl \
            tree \
            unzip \
            make \
            python3 \
            python3-pip \
            python3-venv \
            bison \
            flex \
            help2man \
            libfl-dev \
            libfl2 \
            libgit2-dev \
            libunwind-dev \
            libgoogle-perftools-dev \
            libqt5svg5-dev \
            libz-dev \
            perl \
            time \
            zlib1g \
            zlib1g-dev \
            magic \
            netgen \
            xschem \
            ngspice \
            gettext \
            gnat \
            gperf \
            libreadline-dev \
            gawk \
            tcl-dev \
            libffi-dev \
            graphviz \
            xdot \
            pkg-config \
            libboost-system-dev \
            libboost-python-dev \
            libboost-filesystem-dev \
            verilator \
            iverilog \
            yosys \
            gtkwave \
            pandoc

      - name: Verify tool installations
        run: |
          echo "üîç Verifying tool installations..."
          verilator --version
          iverilog -V
          yosys -V
          gtkwave --version
          dot -V
          echo "‚úÖ All tools are available"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cocotb pytest pytest-cov

      # Commented out Vyges CLI setup - not needed for template
      # - name: Setup Vyges CLI (if available)
      #   run: |
      #     # Check if Vyges CLI is available
      #     if command -v vyges &> /dev/null; then
      #       echo "Vyges CLI found"
      #       vyges --version
      #     else
      #       echo "Vyges CLI not found - skipping CLI-based tests"
      #     fi

      # Validation step
      - name: Validate project structure
        if: github.event.inputs.test_validation == 'true' || github.event_name != 'workflow_dispatch'
        run: |
          echo "üîç Validating project structure..."
          
          # Check for required directories
          required_dirs=("rtl" "tb" "docs" "test")
          for dir in "${required_dirs[@]}"; do
            if [ -d "$dir" ]; then
              echo "‚úÖ Found $dir/"
            else
              echo "‚ö†Ô∏è Missing $dir/ (optional for template)"
            fi
          done
          
          # Check for required files
          required_files=("README.md" "LICENSE" "NOTICE")
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ Found $file"
            else
              echo "‚ùå Missing $file"
              exit 1
            fi
          done
          
          # Check for metadata template
          if [ -f "vyges-metadata.template.json" ]; then
            echo "‚úÖ Found vyges-metadata.template.json"
          else
            echo "‚ö†Ô∏è Missing vyges-metadata.template.json"
          fi
          
          echo "‚úÖ Project structure validation complete"

      - name: Validate metadata (if Vyges CLI available)
        if: github.event.inputs.test_validation == 'true' || github.event_name != 'workflow_dispatch'
        run: |
          if command -v vyges &> /dev/null; then
            echo "üîç Validating metadata with Vyges CLI..."
            vyges validate --dry-run || echo "‚ö†Ô∏è Metadata validation failed (expected for template)"
          else
            echo "‚è≠Ô∏è Skipping metadata validation (Vyges CLI not available)"
          fi

      # Linting step
      - name: Lint SystemVerilog files
        if: github.event.inputs.test_linting == 'true' || github.event_name != 'workflow_dispatch'
        run: |
          echo "üîç Linting SystemVerilog files..."
          
          # Find all .sv and .v files
          sv_files=$(find . -name "*.sv" -type f)
          v_files=$(find . -name "*.v" -type f)
          
          if [ -z "$sv_files" ] && [ -z "$v_files" ]; then
            echo "‚ÑπÔ∏è No SystemVerilog/Verilog files found"
          else
            # Lint SystemVerilog files
            for file in $sv_files; do
              echo "Linting SystemVerilog file: $file..."
              verilator --lint-only --Wall --Wno-fatal "$file" || echo "‚ö†Ô∏è Lint issues in $file"
            done
            
            # Lint Verilog files
            for file in $v_files; do
              echo "Linting Verilog file: $file..."
              verilator --lint-only --Wall --Wno-fatal "$file" || echo "‚ö†Ô∏è Lint issues in $file"
            done
          fi
          
          echo "‚úÖ Linting complete"

      - name: Check file permissions
        if: github.event.inputs.test_linting == 'true' || github.event_name != 'workflow_dispatch'
        run: |
          echo "üîç Checking file permissions..."
          
          # Check for executable scripts
          scripts=$(find . -name "*.sh" -type f)
          for script in $scripts; do
            if [ ! -x "$script" ]; then
              echo "‚ö†Ô∏è Script $script is not executable"
            fi
          done
          
          echo "‚úÖ File permission check complete"

      # Simulation step
      - name: Run simulation tests with Verilator
        if: (github.event.inputs.test_simulation == 'true' || github.event_name != 'workflow_dispatch') && (github.event.inputs.simulator == 'verilator' || github.event.inputs.simulator == 'both' || github.event_name != 'workflow_dispatch')
        run: |
          echo "üß™ Running simulation tests with Verilator..."
          
          # Verify simulator is available
          verilator --version
          
          # Check for testbench files and run actual tests
          if [ -d "tb" ]; then
            echo "Found testbench directory"
            
            # Run the testbench Makefile
            if [ -f "tb/Makefile" ]; then
              echo "Running testbench Makefile..."
              cd tb
              
              echo "Running Verilator tests..."
              make verilator-test
              
              cd ..
            else
              echo "‚ö†Ô∏è No Makefile found in tb directory"
            fi
            
            # Look for SystemVerilog testbenches
            sv_tb_files=$(find tb -name "tb_*.sv" -type f)
            if [ -n "$sv_tb_files" ]; then
              echo "Found SystemVerilog testbenches: $sv_tb_files"
            fi
            
            # Look for cocotb testbenches
            cocotb_files=$(find tb -name "test_*.py" -type f)
            if [ -n "$cocotb_files" ]; then
              echo "Found cocotb testbenches: $cocotb_files"
            fi
          else
            echo "‚ÑπÔ∏è No testbench directory found"
          fi
          
          echo "‚úÖ Verilator simulation test execution complete"

      - name: Run simulation tests with Icarus
        if: (github.event.inputs.test_simulation == 'true' || github.event_name != 'workflow_dispatch') && (github.event.inputs.simulator == 'icarus' || github.event.inputs.simulator == 'both' || github.event_name != 'workflow_dispatch')
        run: |
          echo "üß™ Running simulation tests with Icarus..."
          
          # Verify simulator is available
          iverilog -V
          
          # Check for testbench files and run actual tests
          if [ -d "tb" ]; then
            echo "Found testbench directory"
            
            # Run the testbench Makefile
            if [ -f "tb/Makefile" ]; then
              echo "Running testbench Makefile..."
              cd tb
              
              echo "Running Icarus tests..."
              make icarus-test
              
              cd ..
            else
              echo "‚ö†Ô∏è No Makefile found in tb directory"
            fi
            
            # Look for SystemVerilog testbenches
            sv_tb_files=$(find tb -name "tb_*.sv" -type f)
            if [ -n "$sv_tb_files" ]; then
              echo "Found SystemVerilog testbenches: $sv_tb_files"
            fi
            
            # Look for cocotb testbenches
            cocotb_files=$(find tb -name "test_*.py" -type f)
            if [ -n "$cocotb_files" ]; then
              echo "Found cocotb testbenches: $cocotb_files"
            fi
          else
            echo "‚ÑπÔ∏è No testbench directory found"
          fi
          
          echo "‚úÖ Icarus simulation test execution complete"

      # Run cocotb tests
      - name: Run cocotb tests
        if: (github.event.inputs.test_simulation == 'true' || github.event_name != 'workflow_dispatch')
        run: |
          echo "üêç Running cocotb tests..."
          
          if [ -d "tb/cocotb" ]; then
            echo "Found cocotb test directory"
            cd tb/cocotb
            
            # Run cocotb tests - fail the build if tests fail
            echo "Running cocotb tests..."
            make test_all_implementations SIM=icarus
            
            # Also run with Verilator if available
            echo "Running cocotb tests with Verilator..."
            make test_all_implementations SIM=verilator
            
            cd ../..
          else
            echo "‚ÑπÔ∏è No cocotb test directory found"
          fi
          
          echo "‚úÖ cocotb test execution complete"

      # Synthesis step
      - name: Run ASIC synthesis
        if: (github.event.inputs.test_synthesis == 'true' || github.event_name != 'workflow_dispatch') && (github.event.inputs.target_platform == 'asic' || github.event.inputs.target_platform == 'both' || github.event_name != 'workflow_dispatch')
        run: |
          echo "üîß Running ASIC synthesis..."
          
          if [ -d "flow/yosys" ]; then
            echo "‚úÖ Found Yosys configuration for ASIC"
            cd flow/yosys
            
            # Run synthesis for all implementations
            echo "Running ASIC synthesis..."
            make all || echo "‚ö†Ô∏è ASIC synthesis failed"
            
            # Run gate analysis
            echo "Running gate analysis..."
            make gate_analysis || echo "‚ö†Ô∏è Gate analysis failed"
            
            # Generate comprehensive report
            echo "Generating comprehensive report..."
            make comprehensive_report || echo "‚ö†Ô∏è Report generation failed"
            
            # Copy reports to public directory
            mkdir -p ../../public/asic
            cp comprehensive_report.md ../../public/asic/ || true
            cp gate_analysis_report.md ../../public/asic/ || true
            cp synthesis_report.md ../../public/asic/ || true
            
            cd ../../
          else
            echo "‚ö†Ô∏è No Yosys configuration found for ASIC"
            mkdir -p public/asic
            echo "# ASIC Synthesis Report" > public/asic/README.md
            echo "No ASIC synthesis configuration found." >> public/asic/README.md
          fi
          
          echo "‚úÖ ASIC synthesis complete"

      - name: Run FPGA synthesis
        if: (github.event.inputs.test_synthesis == 'true' || github.event_name != 'workflow_dispatch') && (github.event.inputs.target_platform == 'fpga' || github.event.inputs.target_platform == 'both' || github.event_name != 'workflow_dispatch')
        run: |
          echo "üîß Running FPGA synthesis..."
          
          if [ -d "flow/fpga" ]; then
            echo "‚úÖ Found Yosys configuration for FPGA"
            cd flow/fpga
            
            # Run FPGA synthesis
            echo "Running FPGA synthesis..."
            make all || echo "‚ö†Ô∏è FPGA synthesis failed"
            
            # Run FPGA analysis
            echo "Running FPGA analysis..."
            make fpga_analysis || echo "‚ö†Ô∏è FPGA analysis failed"
            
            # Generate comprehensive report
            echo "Generating comprehensive FPGA report..."
            make comprehensive_report || echo "‚ö†Ô∏è FPGA report generation failed"
            
            # Copy reports to public directory
            mkdir -p ../../public/fpga
            cp comprehensive_fpga_report.md ../../public/fpga/ || true
            cp fpga_resource_analysis_report.md ../../public/fpga/ || true
            
            cd ../../
          else
            echo "‚ö†Ô∏è No Yosys configuration found for FPGA"
            mkdir -p public/fpga
            echo "# FPGA Synthesis Report" > public/fpga/README.md
            echo "No FPGA synthesis configuration found." >> public/fpga/README.md
          fi
          
          echo "‚úÖ FPGA synthesis complete"

      # Upload artifacts
      - name: Upload Synthesis Reports as Artifacts
        if: github.event.inputs.test_synthesis == 'true' || github.event_name != 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: synthesis-reports
          path: |
            public/asic/
            public/fpga/

      # Generate comprehensive test harness report
      - name: Generate test harness report
        if: always()
        run: |
          echo "üìä Generating comprehensive test harness report..."
          python3 generate_test_harness_report.py
          
          # Copy report to public directory for GitHub Pages
          if [ -f "test_harness_report.md" ]; then
            mkdir -p public
            cp test_harness_report.md public/
            echo "‚úÖ Test harness report generated and copied to public directory"
          
          # Convert markdown reports to HTML with styling
          echo "üîÑ Converting markdown reports to HTML..."
          
          # Create CSS for HTML reports
          cat > public/report-style.css << 'EOF'
          <style>
          body { 
              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
              max-width: 1200px; 
              margin: 0 auto; 
              padding: 20px; 
              line-height: 1.6;
              color: #24292e;
          }
          h1 { 
              color: #0366d6; 
              border-bottom: 2px solid #e1e4e8; 
              padding-bottom: 10px; 
              margin-top: 0;
          }
          h2 { 
              color: #24292e; 
              margin-top: 30px; 
              border-bottom: 1px solid #e1e4e8;
              padding-bottom: 5px;
          }
          h3 { 
              color: #24292e; 
              margin-top: 25px; 
          }
          table { 
              border-collapse: collapse; 
              width: 100%; 
              margin: 20px 0;
          }
          th, td { 
              border: 1px solid #e1e4e8; 
              padding: 12px; 
              text-align: left; 
          }
          th { 
              background-color: #f6f8fa; 
              font-weight: 600;
          }
          tr:nth-child(even) { 
              background-color: #f6f8fa; 
          }
          code { 
              background-color: #f6f8fa; 
              padding: 2px 4px; 
              border-radius: 3px; 
              font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
          }
          pre { 
              background-color: #f6f8fa; 
              padding: 16px; 
              border-radius: 6px; 
              overflow-x: auto;
          }
          .highlight { 
              background-color: #fff3cd; 
              padding: 10px; 
              border-radius: 4px; 
              border-left: 4px solid #ffc107;
          }
          .success { 
              background-color: #d4edda; 
              padding: 10px; 
              border-radius: 4px; 
              border-left: 4px solid #28a745;
          }
          .error { 
              background-color: #f8d7da; 
              padding: 10px; 
              border-radius: 4px; 
              border-left: 4px solid #dc3545;
          }
          </style>
          EOF
          
          # Convert test harness report to HTML
          if [ -f "test_harness_report.md" ]; then
            pandoc test_harness_report.md -o public/test_harness_report.html --css=report-style.css --standalone --metadata title="Full Adder IP - Test Harness Report"
            echo "‚úÖ Converted test harness report to HTML"
          fi
          
          # Convert ASIC reports to HTML
          if [ -d "public/asic" ]; then
            for file in public/asic/*.md; do
              if [ -f "$file" ]; then
                basename=$(basename "$file" .md)
                pandoc "$file" -o "public/asic/${basename}.html" --css=../report-style.css --standalone --metadata title="Full Adder IP - ${basename}"
                echo "‚úÖ Converted $file to HTML"
              fi
            done
          fi
          
          # Convert FPGA reports to HTML
          if [ -d "public/fpga" ]; then
            for file in public/fpga/*.md; do
              if [ -f "$file" ]; then
                basename=$(basename "$file" .md)
                pandoc "$file" -o "public/fpga/${basename}.html" --css=../report-style.css --standalone --metadata title="Full Adder IP - ${basename}"
                echo "‚úÖ Converted $file to HTML"
              fi
            done
          fi
          
          echo "‚úÖ All markdown reports converted to HTML"
          else
            echo "‚ö†Ô∏è Test harness report generation failed"
          fi

      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        if: (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') && (github.event.inputs.test_synthesis == 'true' || github.event_name != 'workflow_dispatch')
        run: |
          echo "üöÄ Deploying synthesis reports to GitHub Pages..."
          
          # Create index.html for GitHub Pages
          cat > public/index.html << EOF
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Full Adder IP - Reports</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
                  h1 { color: #0366d6; border-bottom: 1px solid #e1e4e8; padding-bottom: 10px; }
                  h2 { color: #24292e; margin-top: 30px; }
                  .report-section { background: #f6f8fa; padding: 20px; border-radius: 6px; margin: 20px 0; }
                  .report-link { display: inline-block; background: #0366d6; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; margin: 10px 5px; }
                  .report-link:hover { background: #0256cc; }
                  .report-link.test { background: #28a745; }
                  .report-link.test:hover { background: #218838; }
                  .timestamp { color: #586069; font-size: 14px; }
              </style>
          </head>
          <body>
              <h1>üîß Full Adder IP - Comprehensive Reports</h1>
              <p class="timestamp">Generated: $(date -u)</p>
              
              <div class="report-section">
                  <h2>üß™ Test Harness Report</h2>
                  <p>Comprehensive test results including simulation, synthesis, and validation reports for all implementations.</p>
                  <a href="./test_harness_report.html" class="report-link test">üìã Test Harness Report (HTML)</a>
                  <a href="./test_harness_report.md" class="report-link test">üìã Test Harness Report (Markdown)</a>
              </div>
              
              <div class="report-section">
                  <h2>üìä ASIC Synthesis Reports</h2>
                  <p>Comprehensive analysis of ASIC implementations including gate counts, transistor analysis, and synthesis results.</p>
                  <a href="./asic/comprehensive_report.html" class="report-link">üìã Comprehensive Report (HTML)</a>
                  <a href="./asic/gate_analysis_report.html" class="report-link">üî¢ Gate Analysis (HTML)</a>
                  <a href="./asic/synthesis_report.html" class="report-link">‚ö° Synthesis Report (HTML)</a>
                  <br><br>
                  <a href="./asic/comprehensive_report.md" class="report-link">üìã Comprehensive Report (Markdown)</a>
                  <a href="./asic/gate_analysis_report.md" class="report-link">üî¢ Gate Analysis (Markdown)</a>
                  <a href="./asic/synthesis_report.md" class="report-link">‚ö° Synthesis Report (Markdown)</a>
              </div>
              
              <div class="report-section">
                  <h2>üîå FPGA Synthesis Reports</h2>
                  <p>FPGA resource utilization analysis and synthesis results for Xilinx 7-series devices.</p>
                  <a href="./fpga/comprehensive_fpga_report.html" class="report-link">üìã Comprehensive Report (HTML)</a>
                  <a href="./fpga/fpga_resource_analysis_report.html" class="report-link">üî¢ Resource Analysis (HTML)</a>
                  <br><br>
                  <a href="./fpga/comprehensive_fpga_report.md" class="report-link">üìã Comprehensive Report (Markdown)</a>
                  <a href="./fpga/fpga_resource_analysis_report.md" class="report-link">üî¢ Resource Analysis (Markdown)</a>
              </div>
              
              <div class="report-section">
                  <h2>üìà Implementation Summary</h2>
                  <ul>
                      <li><strong>Carry Lookahead:</strong> 5 gates, 32 transistors</li>
                      <li><strong>Simple XOR/AND:</strong> 5 gates, 32 transistors</li>
                      <li><strong>Half Adder:</strong> 7 gates, 48 transistors</li>
                  </ul>
              </div>
          </body>
          </html>
          EOF
          
          # Configure git for deployment with proper authentication
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create a clean working directory for deployment
          echo "Setting up clean deployment environment..."
          
          # Check if gh-pages branch exists
          if git ls-remote --heads origin gh-pages | grep gh-pages; then
            echo "gh-pages branch exists, creating clean checkout..."
            # Create a temporary directory for deployment
            mkdir -p /tmp/gh-pages-deploy
            cd /tmp/gh-pages-deploy
            
            # Clone the gh-pages branch (shallow clone for speed)
            git clone --branch gh-pages --single-branch --depth=1 https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git .
            
            # Remove all existing files
            git rm -rf . || true
            
            # Copy new files from the original workspace
            cp -r ${{ github.workspace }}/public/* .
            
            # Commit and push
            git add .
            git commit -m "Update synthesis reports - $(date -u)" || echo "No changes to commit"
            git push origin gh-pages
            
            echo "‚úÖ GitHub Pages deployment complete!"
          else
            echo "gh-pages branch not found, creating new one..."
            # Create a temporary directory for deployment
            mkdir -p /tmp/gh-pages-deploy
            cd /tmp/gh-pages-deploy
            
            # Initialize new repository
            git init
            git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
            
            # Copy files from the original workspace
            cp -r ${{ github.workspace }}/public/* .
            
            # Create and push gh-pages branch
            git add .
            git commit -m "Initial synthesis reports - $(date -u)"
            git branch -M gh-pages
            git push -u origin gh-pages
            
            echo "‚úÖ GitHub Pages deployment complete!"
          fi
          
          echo "üìñ Reports available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" 

 