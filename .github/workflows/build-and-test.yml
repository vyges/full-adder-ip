name: Build and Test IP

# This workflow is disabled by default and requires manual triggering
# It provides a generic build and test pipeline for Vyges IP projects

on:
  push:
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      - '**.md'
      - '.github/ISSUE_TEMPLATE/**'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      - '**.md'
      - '.github/ISSUE_TEMPLATE/**'
  workflow_dispatch:
    inputs:
      # Allow users to specify which components to test
      test_simulation:
        description: 'Run simulation tests'
        required: false
        default: true
        type: boolean
      test_synthesis:
        description: 'Run synthesis tests'
        required: false
        default: true
        type: boolean
      test_linting:
        description: 'Run linting checks'
        required: false
        default: true
        type: boolean
      test_validation:
        description: 'Run validation checks'
        required: false
        default: true
        type: boolean
      target_platform:
        description: 'Target platform (asic, fpga, or both)'
        required: false
        default: 'both'
        type: choice
        options:
          - asic
          - fpga
          - both
      simulator:
        description: 'Simulator to use'
        required: false
        default: 'both'
        type: choice
        options:
          - verilator
          - icarus
          - both

# Disable automatic runs - this workflow only runs on manual trigger
# and when explicitly enabled by repository maintainers

jobs:
  # Setup environment
  setup:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            cmake \
            git \
            wget \
            curl \
            tree \
            unzip \
            make \
            python3 \
            python3-pip \
            python3-venv \
            bison \
            flex \
            help2man \
            libfl-dev \
            libfl2 \
            libgit2-dev \
            libunwind-dev \
            libgoogle-perftools-dev \
            libqt5svg5-dev \
            libz-dev \
            perl \
            time \
            zlib1g \
            zlib1g-dev \
            magic \
            netgen \
            xschem \
            ngspice \
            gettext \
            gnat \
            gperf \
            libreadline-dev \
            gawk \
            tcl-dev \
            libffi-dev \
            graphviz \
            xdot \
            pkg-config \
            libboost-system-dev \
            libboost-python-dev \
            libboost-filesystem-dev

      - name: Install Yosys from source
        run: |
          echo "🔧 Installing Yosys from source..."
          
          # Clone Yosys repository
          git clone https://github.com/YosysHQ/yosys.git
          cd yosys
          
          # Build and install Yosys
          make config-gcc
          make -j$(nproc)
          sudo make install
          
          # Verify installation
          yosys -V
          yosys -m slang -p "slang_version"
          
          # Verify Yosys version meets requirement (>= 0.39)
          YOSYS_VERSION=$(yosys -V | grep -oP 'Yosys \K[0-9]+\.[0-9]+')
          echo "Installed Yosys version: $YOSYS_VERSION"
          
          # Check if version >= 0.39
          if [ "$(printf '%s\n' "0.39" "$YOSYS_VERSION" | sort -V | head -n1)" = "0.39" ]; then
            echo "✅ Yosys version $YOSYS_VERSION meets requirement (>= 0.39)"
          else
            echo "❌ Yosys version $YOSYS_VERSION does not meet requirement (>= 0.39)"
            exit 1
          fi
          
          # Verify ABC is available
          yosys -p "help abc" | grep -q "ABC" && echo "✅ ABC technology mapping available" || echo "❌ ABC not available"
          
          cd ..

      - name: Install Verilator 5.026
        run: |
          # Clone Verilator repository
          git clone https://github.com/verilator/verilator.git
          cd verilator
          
          # Checkout specific version 5.026
          git checkout v5.026
          
          # Build and install
          autoconf
          ./configure
          make -j$(nproc)
          sudo make install
          
          # Verify installation
          verilator --version

      - name: Install GHDL Yosys plugin
        run: |
          echo "🔧 Installing GHDL Yosys plugin..."
          
          # Install GHDL (VHDL simulator)
          sudo apt-get install -y ghdl
          
          # Clone GHDL Yosys plugin
          git clone https://github.com/ghdl/ghdl-yosys-plugin.git
          cd ghdl-yosys-plugin
          
          # Build the plugin
          make
          
          # Install the plugin
          sudo make install
          
          # Verify installation
          echo "✅ GHDL Yosys plugin installed"
          echo "Note: VHDL synthesis support is now available in Yosys"

      - name: Install Icarus Verilog (if selected)
        if: ${{ github.event.inputs.simulator == 'icarus' || github.event.inputs.simulator == 'both' }}
        run: |
          sudo apt-get install -y iverilog
          iverilog -V
          
      - name: Install GTKWave (for waveform viewing)
        run: |
          sudo apt-get install -y gtkwave
          gtkwave --version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cocotb pytest pytest-cov

      - name: Install Graphviz (for synthesis reports)
        run: |
          sudo apt-get install -y graphviz
          dot -V

      - name: Setup Vyges CLI (if available)
        run: |
          # Check if Vyges CLI is available
          if command -v vyges &> /dev/null; then
            echo "Vyges CLI found"
            vyges --version
          else
            echo "Vyges CLI not found - skipping CLI-based tests"
          fi

  # Validate project structure
  validate:
    needs: [setup]
    if: github.event.inputs.test_validation == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate project structure
        run: |
          echo "🔍 Validating project structure..."
          
          # Check for required directories
          required_dirs=("rtl" "tb" "docs" "test")
          for dir in "${required_dirs[@]}"; do
            if [ -d "$dir" ]; then
              echo "✅ Found $dir/"
            else
              echo "⚠️ Missing $dir/ (optional for template)"
            fi
          done
          
          # Check for required files
          required_files=("README.md" "LICENSE" "NOTICE")
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ Found $file"
            else
              echo "❌ Missing $file"
              exit 1
            fi
          done
          
          # Check for metadata template
          if [ -f "vyges-metadata.template.json" ]; then
            echo "✅ Found vyges-metadata.template.json"
          else
            echo "⚠️ Missing vyges-metadata.template.json"
          fi
          
          echo "✅ Project structure validation complete"

      - name: Validate metadata (if Vyges CLI available)
        run: |
          if command -v vyges &> /dev/null; then
            echo "🔍 Validating metadata with Vyges CLI..."
            vyges validate --dry-run || echo "⚠️ Metadata validation failed (expected for template)"
          else
            echo "⏭️ Skipping metadata validation (Vyges CLI not available)"
          fi

  # Run linting checks
  lint:
    needs: [setup]
    if: github.event.inputs.test_linting == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Verilator
        run: |
          sudo apt-get update
          sudo apt-get install -y verilator

      - name: Lint SystemVerilog files
        run: |
          echo "🔍 Linting SystemVerilog files..."
          
          # Find all .sv files
          sv_files=$(find . -name "*.sv" -type f)
          
          if [ -z "$sv_files" ]; then
            echo "ℹ️ No SystemVerilog files found (expected for template)"
          else
            for file in $sv_files; do
              echo "Linting $file..."
              verilator --lint-only --Wall --Wno-fatal "$file" || echo "⚠️ Lint issues in $file"
            done
          fi
          
          echo "✅ Linting complete"

      - name: Check file permissions
        run: |
          echo "🔍 Checking file permissions..."
          
          # Check for executable scripts
          scripts=$(find . -name "*.sh" -type f)
          for script in $scripts; do
            if [ ! -x "$script" ]; then
              echo "⚠️ Script $script is not executable"
            fi
          done
          
          echo "✅ File permission check complete"

  # Run simulation tests
  simulation:
    needs: [setup]
    if: github.event.inputs.test_simulation == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        simulator: [verilator, icarus]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Check if simulator should run
        id: check-simulator
        run: |
          if [ "${{ github.event.inputs.simulator }}" = "both" ]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.simulator }}" = "${{ matrix.simulator }}" ]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
          fi

      - name: Install ${{ matrix.simulator }}
        if: steps.check-simulator.outputs.should-run == 'true'
        run: |
          sudo apt-get update
          if [ "${{ matrix.simulator }}" = "verilator" ]; then
            sudo apt-get install -y verilator
            verilator --version
          elif [ "${{ matrix.simulator }}" = "icarus" ]; then
            sudo apt-get install -y iverilog
            iverilog -V
          fi

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cocotb pytest pytest-cov

      - name: Install Graphviz (for synthesis reports)
        run: |
          sudo apt-get install -y graphviz
          dot -V

      - name: Run simulation tests with ${{ matrix.simulator }}
        if: steps.check-simulator.outputs.should-run == 'true'
        run: |
          echo "🧪 Running simulation tests with ${{ matrix.simulator }}..."
          
          # Check for testbench files
          if [ -d "tb" ]; then
            echo "Found testbench directory"
            
            # Look for SystemVerilog testbenches
            sv_tb_files=$(find tb -name "tb_*.sv" -type f)
            if [ -n "$sv_tb_files" ]; then
              echo "Found SystemVerilog testbenches: $sv_tb_files"
              # Note: Actual test execution would require specific testbench setup
              echo "ℹ️ SystemVerilog testbench execution requires specific setup"
            fi
            
            # Look for cocotb testbenches
            cocotb_files=$(find tb -name "test_*.py" -type f)
            if [ -n "$cocotb_files" ]; then
              echo "Found cocotb testbenches: $cocotb_files"
              # Note: Actual test execution would require specific testbench setup
              echo "ℹ️ Cocotb testbench execution requires specific setup"
            fi
            
            if [ -z "$sv_tb_files" ] && [ -z "$cocotb_files" ]; then
              echo "ℹ️ No testbench files found (expected for template)"
            fi
          else
            echo "ℹ️ No testbench directory found (expected for template)"
          fi
          
          echo "✅ Simulation test check complete"

  # Run synthesis tests
  synthesis:
    needs: [setup]
    if: github.event.inputs.test_synthesis == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [asic, fpga]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if platform should run
        id: check-platform
        run: |
          if [ "${{ github.event.inputs.target_platform }}" = "both" ]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.target_platform }}" = "${{ matrix.platform }}" ]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
          fi

      - name: Check synthesis configuration for ${{ matrix.platform }}
        if: steps.check-platform.outputs.should-run == 'true'
        run: |
          echo "🔧 Checking synthesis configuration for ${{ matrix.platform }}..."
          
          if [ "${{ matrix.platform }}" = "asic" ]; then
            if [ -d "flow/yosys" ]; then
              echo "✅ Found Yosys configuration for ASIC"
              cd flow/yosys
              make all
              make gate_analysis
              make comprehensive_report
              mkdir -p ../../public/asic
              cp comprehensive_report.md ../../public/asic/
              cp gate_analysis_report.md ../../public/asic/ || true
              cd ../../
            else
              echo "❌ No Yosys configuration found for ASIC"
              exit 1
            fi
          elif [ "${{ matrix.platform }}" = "fpga" ]; then
            if [ -d "flow/fpga" ]; then
              echo "✅ Found Yosys configuration for FPGA"
              cd flow/fpga
              make all
              make fpga_analysis
              make comprehensive_report
              mkdir -p ../../public/fpga
              cp comprehensive_fpga_report.md ../../public/fpga/
              cp fpga_resource_analysis_report.md ../../public/fpga/ || true
              cd ../../
            else
              echo "❌ No Yosys configuration found for FPGA"
              exit 1
            fi
          fi
          
          echo "✅ Synthesis configuration check complete"

      - name: Upload Synthesis Reports as Artifacts
        if: steps.check-platform.outputs.should-run == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: synthesis-reports-${{ matrix.platform }}
          path: |
            public/asic/
            public/fpga/

# Deploy job for GitHub Pages
  deploy-pages:
    if: github.ref == 'refs/heads/main' && needs.synthesis.result == 'success'
    needs: [synthesis]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Create public directory structure
        run: |
          mkdir -p public/asic public/fpga
          echo "# Synthesis Reports" > public/index.html
          echo "## ASIC Reports" >> public/index.html
          echo "Available at: [ASIC Reports](./asic/)" >> public/index.html
          echo "## FPGA Reports" >> public/index.html
          echo "Available at: [FPGA Reports](./fpga/)" >> public/index.html
      - name: Download synthesis artifacts
        uses: actions/download-artifact@v4
        with:
          name: synthesis-reports-asic
          path: public/asic
          if-no-files-found: warn
      - name: Download FPGA artifacts
        uses: actions/download-artifact@v4
        with:
          name: synthesis-reports-fpga
          path: public/fpga
          if-no-files-found: warn
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          publish_dir: ./public
          publish_branch: gh-pages
          force_orphan: true
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          # Enable GitHub Pages if not already enabled
          enable_jekyll: false
          # Add a .nojekyll file to bypass Jekyll processing
          cname: ''

  # Generate test report
  report:
    needs: [validate, lint, simulation, synthesis]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate test report
        run: |
          echo "📊 Test Report"
          echo "=============="
          echo "Repository: ${{ github.repository }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo ""
          echo "Test Results:"
          echo "- Validation: ${{ needs.validate.result == 'success' && '✅ PASSED' || '⏭️ SKIPPED' }}"
          echo "- Linting: ${{ needs.lint.result == 'success' && '✅ PASSED' || '⏭️ SKIPPED' }}"
          echo "- Simulation: ${{ needs.simulation.result == 'success' && '✅ PASSED' || '⏭️ SKIPPED' }}"
          echo "- Synthesis: ${{ needs.synthesis.result == 'success' && '✅ PASSED' || '⏭️ SKIPPED' }}"
          echo ""
          echo "Note: This is a template repository. Actual tests require IP-specific implementation."

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_id }}
          path: |
            test-results/
          retention-days: 7

  # Final status
  status:
    needs: [validate, lint, simulation, synthesis, report]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Workflow status
        run: |
          if [ "${{ needs.check-enabled.outputs.should-run }}" = "true" ]; then
            echo "🎉 Workflow completed successfully!"
            echo "This template repository is ready for IP development."
            echo ""
            echo "Next steps:"
            echo "1. Use 'Use this template' to create a new repository"
            echo "2. Clone your new repository"
            echo "3. Run 'vyges init --interactive' to set up your IP"
            echo "4. Add your RTL and testbenches"
            echo "5. Enable this workflow in your new repository"
          else
            echo "ℹ️ Workflow disabled - this is expected for the template repository"
            echo "Enable this workflow in your IP repository after setup"
          fi 

 