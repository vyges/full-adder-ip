name: Build and Test IP

# This workflow is disabled by default and requires manual triggering
# It provides a generic build and test pipeline for Vyges IP projects

on:
  push:
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      - '**.md'
      - '.github/ISSUE_TEMPLATE/**'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      - '**.md'
      - '.github/ISSUE_TEMPLATE/**'
  workflow_dispatch:
    inputs:
      # Allow users to specify which components to test
      test_simulation:
        description: 'Run simulation tests'
        required: false
        default: true
        type: boolean
      test_synthesis:
        description: 'Run synthesis tests'
        required: false
        default: true
        type: boolean
      test_linting:
        description: 'Run linting checks'
        required: false
        default: true
        type: boolean
      test_validation:
        description: 'Run validation checks'
        required: false
        default: true
        type: boolean
      target_platform:
        description: 'Target platform (asic, fpga, or both)'
        required: false
        default: 'both'
        type: choice
        options:
          - asic
          - fpga
          - both
      simulator:
        description: 'Simulator to use'
        required: false
        default: 'both'
        type: choice
        options:
          - verilator
          - icarus
          - both

# Disable automatic runs - this workflow only runs on manual trigger
# and when explicitly enabled by repository maintainers

jobs:
  # Setup environment
  setup:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            cmake \
            git \
            wget \
            curl \
            tree \
            unzip \
            make \
            python3 \
            python3-pip \
            python3-venv \
            bison \
            flex \
            help2man \
            libfl-dev \
            libfl2 \
            libgit2-dev \
            libunwind-dev \
            libgoogle-perftools-dev \
            libqt5svg5-dev \
            libz-dev \
            perl \
            time \
            zlib1g \
            zlib1g-dev \
            magic \
            netgen \
            xschem \
            ngspice \
            gettext \
            gnat \
            gperf \
            libreadline-dev \
            gawk \
            tcl-dev \
            libffi-dev \
            graphviz \
            xdot \
            pkg-config \
            libboost-system-dev \
            libboost-python-dev \
            libboost-filesystem-dev \
            verilator \
            iverilog

      - name: Install Yosys from package
        run: |
          echo "üîß Installing Yosys from package..."
          
          # Install Yosys from Ubuntu package manager
          sudo apt-get update
          sudo apt-get install -y yosys
          
          # Verify installation
          yosys -V
          
          # Get Yosys version
          YOSYS_VERSION=$(yosys -V | grep -oP 'Yosys \K[0-9]+\.[0-9]+')
          echo "Installed Yosys version: $YOSYS_VERSION"
          
          # Verify ABC is available
          yosys -p "help abc" | grep -q "ABC" && echo "‚úÖ ABC technology mapping available" || echo "‚ùå ABC not available"
          
          # Test basic functionality
          echo "Testing Yosys basic functionality..."
          yosys -p "help" | head -5


          
      - name: Install GTKWave (for waveform viewing)
        run: |
          sudo apt-get install -y gtkwave
          gtkwave --version

      - name: Verify Icarus Verilog installation
        run: |
          echo "üîç Verifying Icarus Verilog installation..."
          iverilog -V
          echo "‚úÖ Icarus Verilog is available"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cocotb pytest pytest-cov

      - name: Install Graphviz (for synthesis reports)
        run: |
          sudo apt-get install -y graphviz
          dot -V

      - name: Setup Vyges CLI (if available)
        run: |
          # Check if Vyges CLI is available
          if command -v vyges &> /dev/null; then
            echo "Vyges CLI found"
            vyges --version
          else
            echo "Vyges CLI not found - skipping CLI-based tests"
          fi

  # Validate project structure
  validate:
    needs: [setup]
    if: github.event.inputs.test_validation == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate project structure
        run: |
          echo "üîç Validating project structure..."
          
          # Check for required directories
          required_dirs=("rtl" "tb" "docs" "test")
          for dir in "${required_dirs[@]}"; do
            if [ -d "$dir" ]; then
              echo "‚úÖ Found $dir/"
            else
              echo "‚ö†Ô∏è Missing $dir/ (optional for template)"
            fi
          done
          
          # Check for required files
          required_files=("README.md" "LICENSE" "NOTICE")
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ Found $file"
            else
              echo "‚ùå Missing $file"
              exit 1
            fi
          done
          
          # Check for metadata template
          if [ -f "vyges-metadata.template.json" ]; then
            echo "‚úÖ Found vyges-metadata.template.json"
          else
            echo "‚ö†Ô∏è Missing vyges-metadata.template.json"
          fi
          
          echo "‚úÖ Project structure validation complete"

      - name: Validate metadata (if Vyges CLI available)
        run: |
          if command -v vyges &> /dev/null; then
            echo "üîç Validating metadata with Vyges CLI..."
            vyges validate --dry-run || echo "‚ö†Ô∏è Metadata validation failed (expected for template)"
          else
            echo "‚è≠Ô∏è Skipping metadata validation (Vyges CLI not available)"
          fi

  # Run linting checks
  lint:
    needs: [setup]
    if: github.event.inputs.test_linting == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Lint SystemVerilog files
        run: |
          echo "üîç Linting SystemVerilog files..."
          
          # Find all .sv and .v files
          sv_files=$(find . -name "*.sv" -type f)
          v_files=$(find . -name "*.v" -type f)
          
          if [ -z "$sv_files" ] && [ -z "$v_files" ]; then
            echo "‚ÑπÔ∏è No SystemVerilog/Verilog files found"
          else
            # Lint SystemVerilog files
            for file in $sv_files; do
              echo "Linting SystemVerilog file: $file..."
              verilator --lint-only --Wall --Wno-fatal "$file" || echo "‚ö†Ô∏è Lint issues in $file"
            done
            
            # Lint Verilog files
            for file in $v_files; do
              echo "Linting Verilog file: $file..."
              verilator --lint-only --Wall --Wno-fatal "$file" || echo "‚ö†Ô∏è Lint issues in $file"
            done
          fi
          
          echo "‚úÖ Linting complete"

      - name: Check file permissions
        run: |
          echo "üîç Checking file permissions..."
          
          # Check for executable scripts
          scripts=$(find . -name "*.sh" -type f)
          for script in $scripts; do
            if [ ! -x "$script" ]; then
              echo "‚ö†Ô∏è Script $script is not executable"
            fi
          done
          
          echo "‚úÖ File permission check complete"

  # Run simulation tests
  simulation:
    needs: [setup]
    if: github.event.inputs.test_simulation == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        simulator: [verilator, icarus]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Check if simulator should run
        id: check-simulator
        run: |
          if [ "${{ github.event.inputs.simulator }}" = "both" ]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.simulator }}" = "${{ matrix.simulator }}" ]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
          fi



      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cocotb pytest pytest-cov

      - name: Install Graphviz (for synthesis reports)
        run: |
          sudo apt-get install -y graphviz
          dot -V

      - name: Run simulation tests with ${{ matrix.simulator }}
        if: steps.check-simulator.outputs.should-run == 'true'
        run: |
          echo "üß™ Running simulation tests with ${{ matrix.simulator }}..."
          
          # Check for testbench files and run actual tests
          if [ -d "tb" ]; then
            echo "Found testbench directory"
            
            # Run the testbench Makefile
            if [ -f "tb/Makefile" ]; then
              echo "Running testbench Makefile..."
              cd tb
              
              if [ "${{ matrix.simulator }}" = "verilator" ]; then
                echo "Running Verilator tests..."
                make verilator-test || echo "‚ö†Ô∏è Verilator tests failed"
              elif [ "${{ matrix.simulator }}" = "icarus" ]; then
                echo "Running Icarus tests..."
                make icarus-test || echo "‚ö†Ô∏è Icarus tests failed"
              fi
              
              cd ..
            else
              echo "‚ö†Ô∏è No Makefile found in tb directory"
            fi
            
            # Look for SystemVerilog testbenches
            sv_tb_files=$(find tb -name "tb_*.sv" -type f)
            if [ -n "$sv_tb_files" ]; then
              echo "Found SystemVerilog testbenches: $sv_tb_files"
            fi
            
            # Look for cocotb testbenches
            cocotb_files=$(find tb -name "test_*.py" -type f)
            if [ -n "$cocotb_files" ]; then
              echo "Found cocotb testbenches: $cocotb_files"
            fi
          else
            echo "‚ÑπÔ∏è No testbench directory found"
          fi
          
          echo "‚úÖ Simulation test execution complete"

  # Run synthesis tests
  synthesis:
    needs: [setup]
    if: github.event.inputs.test_synthesis == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [asic, fpga]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if platform should run
        id: check-platform
        run: |
          if [ "${{ github.event.inputs.target_platform }}" = "both" ]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.target_platform }}" = "${{ matrix.platform }}" ]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
          fi

      - name: Check synthesis configuration for ${{ matrix.platform }}
        if: steps.check-platform.outputs.should-run == 'true'
        run: |
          echo "üîß Checking synthesis configuration for ${{ matrix.platform }}..."
          
          if [ "${{ matrix.platform }}" = "asic" ]; then
            if [ -d "flow/yosys" ]; then
              echo "‚úÖ Found Yosys configuration for ASIC"
              cd flow/yosys
              
              # Run synthesis for all implementations
              echo "Running ASIC synthesis..."
              make all || echo "‚ö†Ô∏è ASIC synthesis failed"
              
              # Run gate analysis
              echo "Running gate analysis..."
              make gate_analysis || echo "‚ö†Ô∏è Gate analysis failed"
              
              # Generate comprehensive report
              echo "Generating comprehensive report..."
              make comprehensive_report || echo "‚ö†Ô∏è Report generation failed"
              
              # Copy reports to public directory
              mkdir -p ../../public/asic
              cp comprehensive_report.md ../../public/asic/ || true
              cp gate_analysis_report.md ../../public/asic/ || true
              cp synthesis_report.md ../../public/asic/ || true
              
              cd ../../
            else
              echo "‚ö†Ô∏è No Yosys configuration found for ASIC"
              mkdir -p public/asic
              echo "# ASIC Synthesis Report" > public/asic/README.md
              echo "No ASIC synthesis configuration found." >> public/asic/README.md
            fi
          elif [ "${{ matrix.platform }}" = "fpga" ]; then
            if [ -d "flow/fpga" ]; then
              echo "‚úÖ Found Yosys configuration for FPGA"
              cd flow/fpga
              
              # Run FPGA synthesis
              echo "Running FPGA synthesis..."
              make all || echo "‚ö†Ô∏è FPGA synthesis failed"
              
              # Run FPGA analysis
              echo "Running FPGA analysis..."
              make fpga_analysis || echo "‚ö†Ô∏è FPGA analysis failed"
              
              # Generate comprehensive report
              echo "Generating comprehensive FPGA report..."
              make comprehensive_report || echo "‚ö†Ô∏è FPGA report generation failed"
              
              # Copy reports to public directory
              mkdir -p ../../public/fpga
              cp comprehensive_fpga_report.md ../../public/fpga/ || true
              cp fpga_resource_analysis_report.md ../../public/fpga/ || true
              
              cd ../../
            else
              echo "‚ö†Ô∏è No Yosys configuration found for FPGA"
              mkdir -p public/fpga
              echo "# FPGA Synthesis Report" > public/fpga/README.md
              echo "No FPGA synthesis configuration found." >> public/fpga/README.md
            fi
          fi
          
          echo "‚úÖ Synthesis configuration check complete"

      - name: Upload Synthesis Reports as Artifacts
        if: steps.check-platform.outputs.should-run == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: synthesis-reports-${{ matrix.platform }}
          path: |
            public/asic/
            public/fpga/

# Deploy job for GitHub Pages
  deploy-pages:
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    needs: [synthesis]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Create public directory structure
        run: |
          mkdir -p public/asic public/fpga
          echo "# Synthesis Reports" > public/index.html
          echo "## ASIC Reports" >> public/index.html
          echo "Available at: [ASIC Reports](./asic/)" >> public/index.html
          echo "## FPGA Reports" >> public/index.html
          echo "Available at: [FPGA Reports](./fpga/)" >> public/index.html
      - name: Download synthesis artifacts
        uses: actions/download-artifact@v4
        with:
          name: synthesis-reports-asic
          path: public/asic
          if-no-files-found: warn
      - name: Download FPGA artifacts
        uses: actions/download-artifact@v4
        with:
          name: synthesis-reports-fpga
          path: public/fpga
          if-no-files-found: warn
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          publish_dir: ./public
          publish_branch: gh-pages
          force_orphan: true
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          # Enable GitHub Pages if not already enabled
          enable_jekyll: false
          # Add a .nojekyll file to bypass Jekyll processing
          cname: ''

  # Generate test report
  report:
    needs: [validate, lint, simulation, synthesis]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate test report
        run: |
          echo "üìä Test Report"
          echo "=============="
          echo "Repository: ${{ github.repository }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo ""
          echo "Test Results:"
          echo "- Validation: ${{ needs.validate.result == 'success' && '‚úÖ PASSED' || needs.validate.result == 'skipped' && '‚è≠Ô∏è SKIPPED' || '‚ùå FAILED' }}"
          echo "- Linting: ${{ needs.lint.result == 'success' && '‚úÖ PASSED' || needs.lint.result == 'skipped' && '‚è≠Ô∏è SKIPPED' || '‚ùå FAILED' }}"
          echo "- Simulation: ${{ needs.simulation.result == 'success' && '‚úÖ PASSED' || needs.simulation.result == 'skipped' && '‚è≠Ô∏è SKIPPED' || '‚ùå FAILED' }}"
          echo "- Synthesis: ${{ needs.synthesis.result == 'success' && '‚úÖ PASSED' || needs.synthesis.result == 'skipped' && '‚è≠Ô∏è SKIPPED' || '‚ùå FAILED' }}"
          echo ""
          echo "Workflow Configuration:"
          echo "- Test Validation: ${{ github.event.inputs.test_validation || 'true' }}"
          echo "- Test Linting: ${{ github.event.inputs.test_linting || 'true' }}"
          echo "- Test Simulation: ${{ github.event.inputs.test_simulation || 'true' }}"
          echo "- Test Synthesis: ${{ github.event.inputs.test_synthesis || 'true' }}"
          echo "- Target Platform: ${{ github.event.inputs.target_platform || 'both' }}"
          echo "- Simulator: ${{ github.event.inputs.simulator || 'both' }}"
          echo ""
          echo "Note: This is a template repository. Actual tests require IP-specific implementation."

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_id }}
          path: |
            test-results/
          retention-days: 7

  # Final status
  status:
    needs: [validate, lint, simulation, synthesis, report]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Workflow status
        run: |
          echo "üéâ Workflow completed!"
          echo "Repository: ${{ github.repository }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo ""
          echo "Job Results Summary:"
          echo "- Validation: ${{ needs.validate.result }}"
          echo "- Linting: ${{ needs.lint.result }}"
          echo "- Simulation: ${{ needs.simulation.result }}"
          echo "- Synthesis: ${{ needs.synthesis.result }}"
          echo "- Report: ${{ needs.report.result }}"
          echo ""
          echo "This template repository is ready for IP development."
          echo ""
          echo "Next steps:"
          echo "1. Use 'Use this template' to create a new repository"
          echo "2. Clone your new repository"
          echo "3. Run 'vyges init --interactive' to set up your IP"
          echo "4. Add your RTL and testbenches"
          echo "5. Enable this workflow in your new repository" 

 